#!/bin/bash -e

TPLS_TEMPLATES_DIR=${TPLS_TEMPLATES_DIR:-/var/lib/tpls}
TPLS_TEMPLATES_REGISTRY=${TPLS_TEMPLATES_REGISTRY:-https://github.com/phlax/tpls}
TPLS_CONFIG=${TPLS_CONFIG:-/etc/tpls/config.json}
TPLS_RENDER=${TPLS_RENDER:-'.render | to_entries[] | @base64'}


tpls_log () {
    echo "${*}"
}


tpls_log_warn () {
    echo "WARNING: ${*}" >&2
}


tpls_log_error () {
    echo "ERROR: ${*}" >&2
}


tpls_fetch_subdir_from_git () {
    local cwd directory repository tempdir
    repository="$1"
    directory="$2"
    cwd=$(pwd)
    tempdir=$(mktemp -d)

    tpls_log "PULL $directory FROM $repository"
    cd "$tempdir"
    git init -q tmptarget
    cd tmptarget
    git remote add origin "$repository"
    git config core.sparsecheckout true
    echo "${directory}/*"> .git/info/sparse-checkout
    git pull -q --depth=1 origin master
    cd "$cwd"
    cp -a "${tempdir}/tmptarget/${directory}" .
    rm -rf "$tempdir"
}


tpls_fetch_subdir () {
    local directory repository
    repository="$1"
    directory="$2"
    cp -a "${repository}/${directory}" .
}


tpls_templates_list () {
    local hash path
    if [ ! -d "$TPLS_TEMPLATES_DIR" ]; then
	return
    fi
    for path in $(find "$TPLS_TEMPLATES_DIR" -maxdepth 1 -mindepth 1 -type d | rev | cut -d/ -f1 | rev); do
	hash=$(tpls_current_hash "$TPLS_TEMPLATES_DIR/$path")
	echo -e "$path\t$hash\n"
    done | column -t
}


tpls_templates_pull_template () {
    local cwd target tempdir
    cwd=$(pwd)
    tempdir=$(mktemp -d)
    target="$1"
    cd "$tempdir"
    if [[ "$TPLS_TEMPLATES_REGISTRY" = /* ]]; then
	tpls_fetch_subdir "$TPLS_TEMPLATES_REGISTRY" "$target"
    else
	tpls_fetch_subdir_from_git "$TPLS_TEMPLATES_REGISTRY" "$target"
    fi

    if ! tpls_verify_dir "${tempdir}/${target}"; then
	exit 1
    fi

    if [ ! -d "$TPLS_TEMPLATES_DIR" ]; then
	mkdir -p "$TPLS_TEMPLATES_DIR"
    fi

    if [ -d "${TPLS_TEMPLATES_DIR}/${target}" ]; then
	rm -rf "${TPLS_TEMPLATES_DIR:?}/${target}"
    fi
    cp -a "$target" "$TPLS_TEMPLATES_DIR"
    cd "$cwd"
    rm -rf "$tempdir"
}


tpls_pull () {
    local template templates tpls
    if [ -n "$1" ]; then
	tpls_templates_pull_template "${@}"
    else
	for template in $(jq -cr "$TPLS_RENDER" "$TPLS_CONFIG"); do
	    tpls+=("$(echo "$template" | base64 --decode | jq -r '.value.tpls')")
	done
	templates=$(echo "${tpls[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
	for template in $templates; do
	    tpls_templates_pull_template "$template"
	done
    fi
}


tpls_mangle_templateset () {
    local cwd config default file key name required subst tpls value var vars tmpdir
    cwd=$(pwd)
    tmpdir=$(mktemp -d)
    cd "$tmpdir"
    config=$(echo "$1" | base64 --decode)
    name=$(echo "$config" | jq -r '.key')
    tpls=$(echo "$config" | jq -r '.value.tpls')
    vars=$(echo "$config" | jq -r '.value.vars // empty')
    if ! tpls_templates_list | grep "$tpls" > /dev/null; then
	tpls_templates_pull_template "$tpls"
    fi
    cp -a "${TPLS_TEMPLATES_DIR:?}/${tpls}" "$name"
    cd "$name"
    if [ -f ./tpls.json ]; then
	for required in $(jq -r '. // {} | .required // [] | .[]' ./tpls.json); do
	    var=$(echo "$vars" | jq -r --arg required "$required" '.[$required] // empty')
	    if [ -z "$var" ]; then
		tpls_log_warn "Not rendering templates ($name), missing required var: $required"
		return
	    fi
	done
	for default in $(jq -r '. // {} | .defaults // {} | keys[]' ./tpls.json); do
	    value=$(jq -r --arg default "$default" '.defaults[$default]' ./tpls.json)
	    key=$(echo "${default^^}" | tr '.' '_')
	    key="TPL_$key"
	    printf -v "$key" "%s" "$value"
	    export "${key?}"
	    subst+='$'
	    subst+="$key "
	done
    fi
    if [ -n "$vars" ]; then
	for key in $(echo "$vars" | jq -r 'keys[]'); do
	    value=$(echo "$vars" | jq -r --arg key "$key" '.[$key]')
	    key=$(echo "${key^^}" | tr '.' '_')
	    key="TPL_$key"
	    printf -v "$key" "%s" "$value"
	    export "${key?}"
	    subst+='$'
	    subst+="$key "
	done
    fi
    while IFS= read -r -d '' file; do
	if [ "$file" = "./tpls.json" ]; then
	    continue
	fi
	if [ "$file" = "." ]; then
	    continue
	fi
	envsubst "$subst" < "$file" | sponge "$file"
	if [ -n "$TPLS_DEBUG" ]; then
	    echo
	    echo ">>>"
	    echo ">>> TEMPLATE: $file"
	    echo ">>>"
	    echo
	    cat "$file"
	fi
    done < <(find . -type f -print0)
    for key in $(env); do
	key=$(echo "$key" | cut -d= -f1)
	if [[ "$key" = TPL_* ]]; then
	    unset "$key"
	fi
    done
    cp -a "../${name}" "$cwd"
    cd "$cwd"
    rm -rf "$tmpdir"
}


tpls_render_templates () {
    local cwd
    if [ -z "$1" ]; then
	tpls_log_error "You must specify a path to render the templates"
	return
    fi
    cwd=$(pwd)
    if [ ! -d "$1" ]; then
	mkdir -p "$1"
    fi
    cd "$1"
    for template in $(jq -cr "$TPLS_RENDER" "$TPLS_CONFIG"); do
	tpls_mangle_templateset "$template"
    done
    cd "$cwd"
}


tpls_commit () {
    local dirhash metadata name path
    echo "COMMIT TPL..."
    path=${1:-.}
    if [ ! -d "$path" ]; then
	tpls_log_error "You must supply a valid directory path"
	exit 1
    fi
    name=$(basename "$path")
    if [ ! -d "${path}/.tpls" ]; then
	mkdir -p "${path}/.tpls"
	tpls_log_warn "Templates (${name}) .tpls folder did not exist, created"
    fi
    dirhash=$(tpls_hash "${path}")
    metadata="${path}/.tpls/metadata.json"
    if [ ! -f "$metadata" ]; then
	echo "{}" > "$metadata"
    fi
    jq --arg hash "${dirhash}" \
       '.hash = $hash' "$metadata" \
	| sponge "$metadata"
}


tpls_hash () {
    hashtree -i ".tpls/*" -c .tpls/ignore hash "$1"
}


tpls_current_hash () {
    local metadata
    metadata="${1}/.tpls/metadata.json"
    if [ ! -f "$metadata" ]; then
	return
    fi
    jq -r '.hash // empty' "$metadata"
}


tpls_verify_dir () {
    local hash name
    hash=$(tpls_hash "$1")
    current_hash=$(tpls_current_hash "$1")
    name=$(basename "$1")
    if [ -z "$current_hash" ]; then
	tpls_log_warn "Templates (${name}) are not currently hashed"
    elif [ "$current_hash" != "$hash" ]; then
	tpls_log_error "Templates (${name}) hashes do not match"
	exit 1
    fi
}


tpls_verify () {
    tpls_verify_dir "${TPLS_TEMPLATES_DIR}/${1}"
}
